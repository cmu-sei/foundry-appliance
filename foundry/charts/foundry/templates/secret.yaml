# Persist postgres account password on a chart reinstall
{{- $postgresPassword := "" }}
{{- $postgresqlSecret := lookup "v1" "Secret" .Release.Namespace (printf "%s-postgresql" (include "foundry.fullname" .)) }}
{{- if $postgresqlSecret }}
{{-   $postgresPassword = index $postgresqlSecret.data "postgres-password" | b64dec }}
{{- else }}
{{-   $postgresPassword = randAlphaNum 16 }}
{{- end }}

apiVersion: v1
kind: Secret
metadata:
  name: {{ include "foundry.fullname" . }}-postgresql
  labels:
    {{- include "foundry.labels" . | nindent 4 }}
  annotations:
    helm.sh/resource-policy: keep
type: Opaque
data:
  postgres-password: {{ $postgresPassword | b64enc | quote }}

---
{{- $giteaSecret := lookup "v1" "Secret" .Release.Namespace (printf "%s-gitea-admin-secret" (include "foundry.fullname" .)) -}}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "foundry.fullname" . }}-gitea-admin-secret
  labels:
    {{- include "foundry.labels" . | nindent 4 }}
  annotations:
    helm.sh/resource-policy: keep
type: Opaque
data:
  admin-password: {{ if $giteaSecret }}{{ index $giteaSecret.data "admin-password" }}{{ else }}{{ randAlphaNum 16 | b64enc | quote }}{{ end }}

---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "foundry.fullname" $ }}-topomojo-api-dbconnection
  labels:
    {{- include "foundry.labels" $ | nindent 4 }}
type: Opaque
stringData:
  appsettings.conf: |
    Database__ConnectionString = Server={{ include "foundry.fullname" $ }}-postgresql;Port=5432;Database=topomojo;Username=postgres;Password={{ $postgresPassword }};SSL Mode=Prefer;Trust Server Certificate=true;
  cacert.crt: |
    {{- index (lookup "v1" "Secret" .Release.Namespace (printf "%s-ca" .Values.global.infraHelmRelease)).data "ca.crt" | b64dec | nindent 4 }}

---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "foundry.fullname" $ }}-gameboard-api-dbconnection
  labels:
    {{- include "foundry.labels" $ | nindent 4 }}
type: Opaque
stringData:
  Database__ConnectionString: Server={{ include "foundry.fullname" $ }}-postgresql;Port=5432;Database=gameboard;Username=postgres;Password={{ $postgresPassword }};SSL Mode=Prefer;Trust Server Certificate=true;

---
{{- $keycloakSecret := lookup "v1" "Secret" .Release.Namespace (printf "%s-keycloak-auth" (include "foundry.fullname" .)) -}}
{{- $keycloakAdminPassword := randAlphaNum 16 -}}
{{- $keycloakOauthClientSecret := (randBytes 16 | b64dec | printf "%032x") -}}

{{- if and $keycloakSecret (hasKey $keycloakSecret.data "admin-password") -}}
  {{- $keycloakAdminPassword = (index $keycloakSecret.data "admin-password" | b64dec) -}}
{{- end }}
{{- if and $keycloakSecret (hasKey $keycloakSecret.data "oauth-client-secret") -}}
  {{- $keycloakOauthClientSecret = (index $keycloakSecret.data "oauth-client-secret" | b64dec) -}}
{{- end }}

apiVersion: v1
kind: Secret
metadata:
  name: {{ include "foundry.fullname" . }}-keycloak-auth
  labels:
    {{- include "foundry.labels" . | nindent 4 }}
  annotations:
    helm.sh/resource-policy: keep
type: Opaque
stringData:
  admin-password: {{ $keycloakAdminPassword }}
  oauth-client-secret: {{ $keycloakOauthClientSecret }}

---
{{- /* TODO: Share oauth-client-secret and move this back to configmap.yaml */ -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "foundry.fullname" . }}-keycloak-config-cli
  labels:
    {{- include "foundry.labels" . | nindent 4 }}
data:
  realm.json: |
    {
      "realm": "foundry",
      "enabled": true,
      "clientScopes": [
        {
          "name": "topomojo-api",
          "description": "TopoMojo API",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "true"
          },
          "protocolMappers": [
            {
              "name": "audiences",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-audience-mapper",
              "consentRequired": false,
              "config": {
                "included.client.audience": "topomojo-api",
                "id.token.claim": "false",
                "access.token.claim": "true"
              }
            },
            {
              "name": "subject",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-sub-mapper",
              "consentRequired": false,
              "config": {
                "access.token.claim": "true",
                "id.token.claim": "true",
                "userinfo.token.claim": "true"
              }
            }
          ]
        },
        {
          "name": "gameboard-api",
          "description": "Gameboard API",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "true"
          },
          "protocolMappers": [
            {
              "name": "audiences",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-audience-mapper",
              "consentRequired": false,
              "config": {
                "included.client.audience": "gameboard-api",
                "id.token.claim": "false",
                "access.token.claim": "true"
              }
            },
            {
              "name": "subject",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-sub-mapper",
              "consentRequired": false,
              "config": {
                "access.token.claim": "true",
                "id.token.claim": "true",
                "userinfo.token.claim": "true"
              }
            }
          ]
        }
      ],
      "clients": [
        {
          "clientId": "topomojo-client",
          "name": "TopoMojo",
          "enabled": true,
          "protocol": "openid-connect",
          "publicClient": true,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "redirectUris": [
            "/oidc",
            "/oidc-silent.html"
          ],
          "rootUrl": "https://{{ .Values.global.domain }}/topomojo",
          "baseUrl": "/",
          "defaultClientScopes": ["openid", "profile", "topomojo-api"],
          "attributes": {
            "pkce.code.challenge.method": "S256"
          }
        },
        {
          "clientId": "topomojo-swagger",
          "name": "TopoMojo Swagger",
          "enabled": true,
          "protocol": "openid-connect",
          "publicClient": true,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "redirectUris": ["/oauth2-redirect.html"],
          "rootUrl": "https://{{ .Values.global.domain }}/topomojo/api",
          "baseUrl": "/",
          "defaultClientScopes": ["topomojo-api"],
          "attributes": {
            "consent.required": "true"
          }
        },
        {
          "clientId": "gameboard-client",
          "name": "Gameboard",
          "enabled": true,
          "protocol": "openid-connect",
          "publicClient": true,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "redirectUris": [
            "/oidc",
            "/oidc-silent.html"
          ],
          "rootUrl": "https://{{ .Values.global.domain }}/gameboard",
          "baseUrl": "/",
          "defaultClientScopes": [ "openid", "profile", "gameboard-api" ],
          "attributes": {
            "pkce.code.challenge.method": "S256"
          }
        },
        {
          "clientId": "gameboard-swagger",
          "name": "Gameboard Swagger",
          "enabled": true,
          "protocol": "openid-connect",
          "publicClient": true,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "redirectUris": [
            "/oauth2-redirect.html"
          ],
          "rootUrl": "https://{{ .Values.global.domain }}/gameboard/api",
          "baseUrl": "/",
          "defaultClientScopes": ["openid", "profile", "gameboard-api"],
          "attributes": {
            "consent.required": "true"
          }
        },
        {
          "clientId": "gitea-client",
          "name": "Gitea",
          "enabled": true,
          "protocol": "openid-connect",
          "publicClient": false,
          "secret": "{{ $keycloakOauthClientSecret }}",
          "standardFlowEnabled": true,
          "directAccessGrantsEnabled": false,
          "implicitFlowEnabled": false,
          "redirectUris": [
            "/user/oauth2/Foundry/callback"
          ],
          "rootUrl": "https://{{ .Values.global.domain }}/gitea",
          "baseUrl": "/",
          "defaultClientScopes": ["openid", "profile", "email"],
          "attributes": {
            "oauth2.device.authorization.grant.enabled": "false"
          }
        }
      ],
      "roles": {
        "realm": [
          {
            "name": "foundry-admin",
            "description": "Administrator role for the Foundry realm",
            "composite": true,
            "composites": {
              "client": {
                "realm-management": [
                  "realm-admin"
                ]
              }
            }
          }
        ]
      },
      "users": [
        {
          "username": "foundry",
          "email": "administrator@foundry.local",
          "firstName": "Foundry",
          "lastName": "Administrator",
          "enabled": true,
          "credentials": [
            {
              "type": "password",
              "value": "foundry",
              "userLabel": "initial",
              "temporary": true
            }
          ],
          "realmRoles": ["foundry-admin"]
        }
      ]
    }
