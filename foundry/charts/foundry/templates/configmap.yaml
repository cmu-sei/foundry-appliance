apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "foundry.fullname" . }}-keycloak-config-cli
  labels:
    {{- include "foundry.labels" . | nindent 4 }}
data:
  realm.json: |
    {
      "realm": "foundry",
      "enabled": true,
      "clientScopes": [
        {
          "name": "topomojo-api",
          "description": "TopoMojo API",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "true"
          },
          "protocolMappers": [
            {
              "name": "audiences",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-audience-mapper",
              "consentRequired": false,
              "config": {
                "included.client.audience": "topomojo-api",
                "id.token.claim": "false",
                "access.token.claim": "true"
              }
            },
            {
              "name": "subject",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-sub-mapper",
              "consentRequired": false,
              "config": {
                "access.token.claim": "true",
                "id.token.claim": "true",
                "userinfo.token.claim": "true"
              }
            }
          ]
        },
        {
          "name": "gameboard-api",
          "description": "Gameboard API",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "true"
          },
          "protocolMappers": [
            {
              "name": "audiences",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-audience-mapper",
              "consentRequired": false,
              "config": {
                "included.client.audience": "gameboard-api",
                "id.token.claim": "false",
                "access.token.claim": "true"
              }
            },
            {
              "name": "subject",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-sub-mapper",
              "consentRequired": false,
              "config": {
                "access.token.claim": "true",
                "id.token.claim": "true",
                "userinfo.token.claim": "true"
              }
            }
          ]
        }
      ],
      "clients": [
        {
          "clientId": "topomojo-client",
          "name": "TopoMojo",
          "enabled": true,
          "protocol": "openid-connect",
          "publicClient": true,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "redirectUris": [
            "/oidc",
            "/oidc-silent.html"
          ],
          "rootUrl": "https://{{ .Values.global.domain }}/topomojo",
          "defaultClientScopes": ["openid", "profile", "topomojo-api"],
          "attributes": {
            "pkce.code.challenge.method": "S256"
          }
        },
        {
          "clientId": "topomojo-swagger",
          "name": "TopoMojo Swagger",
          "enabled": true,
          "protocol": "openid-connect",
          "publicClient": true,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "redirectUris": ["/oauth2-redirect.html"],
          "rootUrl": "https://{{ .Values.global.domain }}/topomojo/api",
          "defaultClientScopes": ["topomojo-api"],
          "attributes": {
            "consent.required": "true"
          }
        },
        {
          "clientId": "gameboard-client",
          "name": "Gameboard",
          "enabled": true,
          "protocol": "openid-connect",
          "publicClient": true,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "redirectUris": [
            "/oidc",
            "/oidc-silent.html"
          ],
          "rootUrl": "https://{{ .Values.global.domain }}/gameboard",
          "defaultClientScopes": [ "openid", "profile", "gameboard-api" ],
          "attributes": {
            "pkce.code.challenge.method": "S256"
          }
        },
        {
          "clientId": "gameboard-swagger",
          "name": "Gameboard Swagger",
          "enabled": true,
          "protocol": "openid-connect",
          "publicClient": true,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "redirectUris": [
            "/oauth2-redirect.html"
          ],
          "rootUrl": "https://{{ .Values.global.domain }}/gameboard/api",
          "defaultClientScopes": ["openid", "profile", "gameboard-api"],
          "attributes": {
            "consent.required": "true"
          }
        },
        {
          "clientId": "gitea-client",
          "name": "Gitea",
          "enabled": true,
          "protocol": "openid-connect",
          "publicClient": false,
          "secret": "a92de95c865db308dfa5b7a098f45a7f",
          "standardFlowEnabled": true,
          "directAccessGrantsEnabled": false,
          "implicitFlowEnabled": false,
          "redirectUris": [
            "/user/oauth2/Foundry/callback"
          ],
          "rootUrl": "https://{{ .Values.global.domain }}/gitea",
          "defaultClientScopes": ["openid", "profile", "email"],
          "attributes": {
            "oauth2.device.authorization.grant.enabled": "false"
          }
        }
      ],
      "roles": {
        "realm": [
          {
            "name": "foundry-admin",
            "description": "Administrator role for the Foundry realm",
            "composite": true,
            "composites": {
              "client": {
                "realm-management": [
                  "realm-admin"
                ]
              }
            }
          }
        ]
      },
      "users": [
        {
          "username": "foundry",
          "email": "administrator@foundry.local",
          "firstName": "Foundry",
          "lastName": "Administrator",
          "enabled": true,
          "credentials": [
            {
              "type": "password",
              "value": "foundry",
              "userLabel": "initial",
              "temporary": true
            }
          ],
          "realmRoles": ["foundry-admin"]
        }
      ]
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "foundry.fullname" . }}-gitea-env
  labels:
    {{- include "foundry.labels" . | nindent 4 }}
data:
  GITEA__OAUTH2_CLIENT__OPENID_CONNECT_SCOPES: profile email
  GITEA__OAUTH2_CLIENT__ENABLE_AUTO_REGISTRATION: "true"
  GITEA__OAUTH2_CLIENT__USERNAME: userid
  GITEA__OAUTH2_CLIENT__ACCOUNT_LINKING: auto

---
{{- $binaryExt := list "png" "jpg" "jpeg" "gif" "bmp" "ico" "zip" "tar" "gz" "tgz" "pdf" "bin" }}
{{- $textData := dict -}}
{{- $binData  := dict -}}

{{- range $path, $_ := .Files.Glob "files/mkdocs/**" }}
  {{- $key := replace "/" "__" $path }}
  {{- $ext := trimPrefix "." (lower (ext $path)) }}
  {{- $contents := $.Files.Get $path }}
  {{- if has $ext $binaryExt }}
        {{- $_ := set $binData  $key ($contents | b64enc) }}
  {{- else }}
        {{- $_ := set $textData $key ($contents | toString) }}
  {{- end }}
{{- end }}

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "foundry.fullname" . }}-mkdocs-files
  labels:
    {{- include "foundry.labels" . | nindent 4 }}
binaryData:
{{- range $k, $v := $binData }}
  {{ $k }}: {{ $v }}
{{- end }}
data:
{{- range $k, $v := $textData }}
  {{ $k }}: |-
{{ (tpl $v $) | indent 4 }}
{{- end }}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "foundry.fullname" . }}-gitea-job-script
  labels:
    {{- include "foundry.labels" . | nindent 4 }}
data:
  seed-gitea.sh: |
    #!/bin/sh
    set -e

    GITEA_URL=http://{{ include "foundry.fullname" . }}-gitea
    GITEA_ADMIN_USERNAME={{ .Values.gitea.adminUsername }}

    # Wait for Gitea to be ready
    echo "Waiting for Gitea to be ready..."
    until wget -q --spider "${GITEA_URL}/api/v1/version"; do
      echo "Gitea is not ready yet. Waiting..."
      sleep 5
    done
    echo "Gitea is ready!"

    CREATE_ORG_RESPONSE=$(wget -q -O - \
      --header="Content-Type: application/json" \
      --header="Authorization: Basic $(echo -n ${GITEA_ADMIN_USERNAME}:${GITEA_ADMIN_PASSWORD} | base64)" \
      --post-data="{
        \"username\": \"${GITEA_ADMIN_USERNAME}-test\",
        \"repo_admin_change_team_access\": true
      }" \
      "${GITEA_URL}/api/v1/orgs" 2>&1) || {
        echo "Failed to create organization. Response: ${CREATE_ORG_RESPONSE}"

        # Check if org already exists
        if echo "${CREATE_ORG_RESPONSE}" | grep -q "422"; then
          echo "Organization already exists. Proceeding with repo creation..."
        else
          exit 1
        fi
      }

    echo "Organization created."

    CREATE_REPO_RESPONSE=$(wget -q -O - \
      --header="Content-Type: application/json" \
      --header="Authorization: Basic $(echo -n ${GITEA_ADMIN_USERNAME}:${GITEA_ADMIN_PASSWORD} | base64)" \
      --post-data="{
        \"name\": \"mkdocs\",
        \"private\": false,
        \"default_branch\": \"main\"
      }" \
      "${GITEA_URL}/api/v1/user/repos" 2>&1) || {
        echo "Failed to create repository. Response: ${CREATE_REPO_RESPONSE}"

        # Check if repo already exists
        if echo "${CREATE_REPO_RESPONSE}" | grep -q "409"; then
          echo "Repository already exists. Proceeding with push..."
        else
          exit 1
        fi
      }

    echo "Repository created or already exists."

    # Check if repository is empty before committing
    REPO_URL="http://$GITEA_ADMIN_USERNAME:$GITEA_ADMIN_PASSWORD@{{ include "foundry.fullname" . }}-gitea/foundry/mkdocs.git"

    echo "Checking if repository is empty..."
    REMOTE_REFS=$(git ls-remote "$REPO_URL" 2>/dev/null || echo "")

    if [ -n "$REMOTE_REFS" ]; then
      echo "Repository is not empty. Skipping initial commit."
      exit 0
    fi

    echo "Repository is empty. Proceeding with initial commit..."

    # Set git user vars
    git config --global user.name "Foundry Administrator"
    git config --global user.email "administrator@foundry.local"
    git config --global init.defaultBranch main

    cp -RL /mkdocs /tmp
    git -C /tmp/mkdocs init
    git -C /tmp/mkdocs add -A
    git -C /tmp/mkdocs commit -m "Initial commit"
    git -C /tmp/mkdocs push -u http://$GITEA_ADMIN_USERNAME:$GITEA_ADMIN_PASSWORD@{{ include "foundry.fullname" . }}-gitea/foundry/mkdocs.git --all
