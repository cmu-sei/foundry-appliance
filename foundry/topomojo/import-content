#!/bin/bash
#
# Copyright 2022 Carnegie Mellon University.
# Released under a BSD (SEI)-style license, please see LICENSE.md in the
# project root or contact permission@sei.cmu.edu for full terms.
#
# Import lab/challenge content into the appliance
#
# import-content <json path>

DATASTORE=datastore1
TOPOMOJO_ACCESS_TOKEN=$(curl --silent --request POST \
  --url 'https://foundry.local/identity/connect/token' \
  --data grant_type=password \
  --data client_id=bootstrap-client \
  --data client_secret=foundry \
  --data username=administrator@foundry.local \
  --data password=foundry | jq -r '.access_token')

# Test if import file exists
if [ -z $1 ] || [ ! -f $1 ]; then
  echo -e "\nUsage: $0 <json path>\n"
  exit 1
fi

workspace_name="$(jq -r '.Workspace.Name' $1)"

# Read ESXi SSH password
read -s -p "ESXi root password: " esxi_pass; echo

# Create tmp directory on datastore
sshpass -p $esxi_pass ssh root@esxi.foundry.local "mkdir /vmfs/volumes/$DATASTORE/tmp"

workspace_id=$(curl -s -X GET "https://foundry.local/topomojo/api/workspaces" \
  -H "Authorization: Bearer $TOPOMOJO_ACCESS_TOKEN" \
  | jq -r -e --arg workspace_name "$workspace_name" '.[] | select(.name==$workspace_name) | .id')

# Check if workspace already exists
if [[ -n $workspace_id ]]; then
  echo -e "Skipping $workspace_name: Workspace exists"
else
  # Add workspace via TopoMojo API
  workspace_id=$(curl -X POST --silent \
    --url "https://foundry.local/topomojo/api/workspace" \
    -H "Authorization: Bearer $TOPOMOJO_ACCESS_TOKEN" \
    -H "Content-Type: application/json" \
    --data-binary @- <<EOF | jq -r '.id'
{
  "name": "$workspace_name",
  "description": "$(jq -r '.Workspace.Description' $1)"
}
EOF
)
fi

# Import TopoMojo templates
IFS=$'\n'
for template in $(jq -c '.Templates[]' $1); do
  template_name=$(echo $template | jq -r '.Name')
  ova_url=$(echo $template | jq -r '.Detail.Disks[0].Path')
  ova_filename=$(echo $ova_url | sed 's/.*\///')
  template_id=$(curl -s -X GET "https://foundry.local/topomojo/api/workspace/$workspace_id" \
                     -H "Authorization: Bearer $TOPOMOJO_ACCESS_TOKEN" \
                     | jq --arg template_name "$template_name" \
                          '.templates[] | select(.name==$template_name) | .id')

  if [[ -n $template_id ]]; then
    echo -e "Skipping $template_name: Template exists"
  else
    # Download OVA if it doesn't already exist in /tmp
    if sshpass -p $esxi_pass ssh root@esxi.foundry.local "test ! -f /vmfs/volumes/$DATASTORE/tmp/$ova_filename"; then
      echo -e "Downloading $ova_filename"
      wget -O- $ova_url | sshpass -p $esxi_pass ssh root@esxi.foundry.local "cat > /vmfs/volumes/$DATASTORE/tmp/$ova_filename"
    else
      echo -e "Skipping $ova_filename: File exists"
    fi

    vmdk_file=$(sshpass -p $esxi_pass ssh root@esxi.foundry.local "tar -tf /vmfs/volumes/$DATASTORE/tmp/$ova_filename | grep .vmdk")

    if sshpass -p $esxi_pass ssh root@esxi.foundry.local "test ! -f /vmfs/volumes/$DATASTORE/$workspace_id/$vmdk_file"; then
      sshpass -p $esxi_pass ssh root@esxi.foundry.local << EOF
        cd /vmfs/volumes/$DATASTORE/tmp
        tar -xvf /vmfs/volumes/$DATASTORE/tmp/$ova_filename $vmdk_file
        mkdir ../topomojo/$workspace_id
        vmkfstools -i $vmdk_file -d thin ../topomojo/$workspace_id/$vmdk_file
        rm -f $vmdk_file
EOF
    fi

    template=$(echo $template | jq \
      --arg datastore "$DATASTORE" \
      --arg workspace_id "$workspace_id" \
      --arg vmdk_file "$vmdk_file" \
      '.Detail.Disks[0].Path = "[ds] " + $workspace_id + "/" + $vmdk_file')
    detail_tostring=$(jq '.Detail' <<< "$template" | jq -sR '.')

    template_id=$(curl -X POST --silent \
      --url "https://foundry.local/topomojo/api/template-detail" \
      -H "Authorization: Bearer $TOPOMOJO_ACCESS_TOKEN" \
      -H "Content-Type: application/json" \
      --data-binary @- <<EOF | jq -r '.id'
{
  "id": "",
  "name": "$template_name",
  "description": "$(echo $template | jq -r '.Description')",
  "networks": "$(echo $template | jq -r '.Networks')",
  "guestinfo": "$(echo $template | jq -r '.GuestInfo')",
  "detail": $detail_tostring,
  "isPublished": $(echo $template | jq -r '.isPublished')
}
EOF
)

    # Move template from stock area to workspace
    kubectl exec --stdin --tty postgresql-postgresql-0 \
      -- env PGPASSWORD=foundry psql -U postgres -d topomojo \
      -c "update \"Templates\" set \"WorkspaceId\" = '$workspace_id' where \"Id\" = '$template_id';"
  fi
done

# Upload challenge doc to TopoMojo API pod
doc_path=$(sed 's/\.[^.]*$/\.md/' <<< "$1")
kup $doc_path topomojo-api:/mnt/tm/_docs/$workspace_id.md

echo -e "Import complete"
