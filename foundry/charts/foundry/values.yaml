nfs-server-provisioner:
  persistence:
    enabled: true

ingress-nginx:
  controller:
    config:
      hsts: "false"
      annotations-risk-level: critical
    allowSnippetAnnotations: true
    ingressClassResource:
      default: true
    updateStrategy:
      type: RollingUpdate
  tcp:
    2049: "foundry/nfs-server-provisioner:2049"
    #5432: "foundry/postgresql:5432"

postgresql:
  auth:
    existingSecret: foundry-postgresql
  primary:
    persistence:
      size: 1Gi
    initdb:
      scripts:
        create-dbs.sql: |
          CREATE DATABASE keycloak;
          CREATE DATABASE gitea;

pgadmin4:
  serverDefinitions:
    servers:
        foundry:
          Name: "foundry"
          Group: "Servers"
          Port: 5432
          Username: "postgres"
          Host: "postgresql"
          PassFile: "../../pgpass.conf"
          SSLMode: "prefer"
          MaintenanceDB: "postgres"
  ingress:
    enabled: true
    annotations:
      nginx.ingress.kubernetes.io/configuration-snippet: |
        proxy_set_header X-Script-Name /pgadmin;
    hosts:
      - host: foundry.local
        paths:
          - path: /pgadmin
            pathType: Prefix
    tls:
      - secretName: appliance-cert
        hosts:
          - foundry.local
  extraSecretMounts:
    - name: pgpassfile
      secret: pgpassfile
      subPath: pgpassfile
      mountPath: "/pgpass.conf"
      readOnly: true
  env:
    email: administrator@foundry.local
    password: foundry
    variables:
      - name: PGADMIN_DISABLE_POSTFIX
        value: "true"
      - name: PGADMIN_CONFIG_ALLOW_SPECIAL_EMAIL_DOMAINS
        value: "['local']"
  persistentVolume:
    size: 1Gi
  extraInitContainers: |
    - name: add-folder-for-pgpass
      image: "dpage/pgadmin4:latest"
      command: ["/bin/mkdir", "-p", "/var/lib/pgadmin/storage/pgadmin"]
      volumeMounts:
        - name: pgadmin-data
          mountPath: /var/lib/pgadmin
      securityContext:
        runAsUser: 5050

keycloak:
  auth:
    adminUser: foundry
    adminPassword: foundry
  extraEnvVarsSecret: foundry-keycloak-env
  httpRelativePath: /keycloak/
  ingress:
    enabled: true
    hostname: foundry.local
    tls: true
    extraTls:
      - hosts:
          - foundry.local
        secretName: appliance-cert
  keycloakConfigCli:
    enabled: true
    existingConfigmap: foundry-keycloak-config-cli
  postgresql:
    enabled: false
  externalDatabase:
    host: foundry-postgresql
    user: postgres
    database: keycloak
    existingSecret: foundry-postgresql
    existingSecretPasswordKey: postgres-password

gitea:
  ingress:
    enabled: true
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /$2
    hosts:
      - host: foundry.local
        paths:
          - path: "/gitea(/|$)(.*)"
            pathType: ImplementationSpecific
    tls:
      - secretName: appliance-cert
        hosts:
          - foundry.local
  persistence:
    size: 1Gi
    storageClass: local-path
  extraVolumes:
    - name: appliance-cert-vol
      secret:
        secretName: appliance-cert
  extraContainerVolumeMounts:
    - name: appliance-cert-vol
      mountPath: /etc/ssl/certs/appliance-ca.crt
      subPath: tls.crt
      readOnly: true
  extraInitVolumeMounts:
    - name: appliance-cert-vol
      mountPath: /etc/ssl/certs/appliance-ca.crt
      subPath: tls.crt
      readOnly: true
  gitea:
    admin:
      existingSecret: foundry-gitea-admin-secret
      email: "administrator@foundry.local"
#    oauth:
#      - name: Foundry
#        provider: openidConnect
#        autoDiscoverUrl: https://foundry.local/auth/realms/master/.well-known/openid-configuration
#        existingSecret: gitea-oauth-client
    config:
      APP_NAME: Foundry Gitea
      server:
        DOMAIN: https://foundry.local/gitea/
        ROOT_URL: https://foundry.local/gitea/
        DISABLE_SSH: true
      database:
        DB_TYPE: postgres
        HOST: foundry-postgresql:5432
        NAME: gitea
        USER: postgres
        SCHEMA: public
      security:
        PASSWORD_COMPLEXITY: "off"
      repository:
        DEFAULT_BRANCH: main
      oauth2_client:
        OPENID_CONNECT_SCOPES: profile email
        ENABLE_AUTO_REGISTRATION: true
        USERNAME: userid
        ACCOUNT_LINKING: auto
    additionalConfigFromEnvs:
      - name: GITEA__DATABASE__PASSWD
        valueFrom:
          secretKeyRef:
            name: foundry-postgresql
            key: postgres-password
  redis-cluster:
    enabled: false
  redis:
    enabled: true
    global:
      redis:
        password: foundry
  postgresql-ha:
    enabled: false

mkdocs-material:
  ingress:
    enabled: true
    annotations:
      nginx.ingress.kubernetes.io/app-root: /start
      nginx.ingress.kubernetes.io/rewrite-target: /$2
      nginx.ingress.kubernetes.io/configuration-snippet: |
        rewrite ^(/start)$ $1/ redirect;
    hosts:
      - host: foundry.local
        paths:
          - path: /start(/|$)(.*)
            pathType: ImplementationSpecific
    tls:
      - secretName: appliance-cert
        hosts:
          - foundry.local
  storage:
    size: 100M
    class: local-path
  giturl: http://foundry-gitea-http:3000/foundry/mkdocs

topomojo:
  topomojo-api:
    ingress:
      enabled: true
      annotations:
        nginx.ingress.kubernetes.io/proxy-body-size: 6g
      hosts:
        - host: foundry.local
          paths:
            - path: /topomojo/api
              pathType: ImplementationSpecific
            - path: /topomojo/hub
              pathType: ImplementationSpecific
            - path: /topomojo/docs
              pathType: ImplementationSpecific
      tls:
        - secretName: appliance-cert
          hosts:
            - foundry.local
    storage:
      existing: foundry-topomojo-nfs
    existingSecret: foundry-topomojo
    env:
      PathBase: /topomojo
      Database__Provider: PostgreSQL
      Database__AdminId: 704d16ba-b969-45c2-843a-c12589963e77
      Database__AdminName: Administrator
      Cache__SharedFolder: ""
      OpenApi__Client__ClientId: topomojo-swagger
      FileUpload__IsoRoot: /mnt/tm
      FileUpload__TopoRoot: /mnt/tm
      FileUpload__DocRoot: /mnt/tm/_docs
      Oidc__Authority: https://foundry.local/auth/realms/master
      ApiKeyClients__0__Id: gameengine
      ApiKeyClients__0__Key: foundry
      ApiKeyClients__0__Scope: gameboard
      Core__ConsoleHost: foundry.local/console
      Pod__ConsoleUrl: foundry.local/console
      Headers__Cors__Origins__0: https://foundry.local
      Headers__Forwarding__TargetHeaders: All
  topomojo-ui:
    ingress:
      enabled: true
      annotations:
        nginx.ingress.kubernetes.io/proxy-body-size: 6g
      hosts:
        - host: foundry.local
          paths:
            - path: /topomojo
              pathType: ImplementationSpecific
      tls:
        - secretName: appliance-cert
          hosts:
            - foundry.local
    basehref: "/topomojo"
    settingsYaml:
      appname: TopoMojo
      oidc:
        authority: "https://foundry.local/auth/realms/master"
        client_id: "topomojo-client"
        redirect_uri: "https://foundry.local/topomojo/oidc"
        silent_redirect_uri: "https://foundry.local/topomojo/oidc-silent.html"
        post_logout_redirect_uri: "https://foundry.local/topomojo"
        response_type: "code"
        scope: "openid profile topomojo-api"
        automaticSilentRenew: true
        includeIdTokenInSilentRenew: false
        filterProtocolClaims: true
        loadUserInfo: true
        accessTokenExpiringNotificationTime: 120
        monitorSession: false
        useLocalStorage: true
