#!/bin/bash
#
# Copyright 2022 Carnegie Mellon University.
# Released under a BSD (SEI)-style license, please see LICENSE.md in the
# project root or contact permission@sei.cmu.edu for full terms.
#
# setup-esxi <esxi ip address>
#
# Adds 'esxi.foundry.local' hostname for VMware ESXi server and
# installs Foundry Appliance TLS certificate and key into the same server
#

HOSTS_FILE=/etc/hosts
ESXI_USER=root
ESXI_HOSTNAME=esxi.foundry.local
ESXI_CERTDIR=/etc/vmware/ssl
RUI_CRT=$(cat certs/host.pem certs/int-ca.pem)
RUI_KEY=$(<certs/host-key.pem)
APPLIANCE_IP=$(ip route get 1 | sed -n 's/^.*src \([0-9.]*\) .*$/\1/p')
TOPOMOJO_NFS_PV=$(kubectl get pvc topomojo-nfs --output=jsonpath='{.spec.volumeName}')
TOPOMOJO_STOCK_PATH=/vmfs/volumes/datastore1/topomojo/00000000-0000-0000-0000-000000000000
TOPOMOJO_ACCESS_TOKEN=$(curl --silent --request POST \
                             --url 'https://foundry.local/identity/connect/token' \
                             --data grant_type=password \
                             --data client_id=bootstrap-client \
                             --data client_secret=foundry \
                             --data username=administrator@foundry.local \
                             --data password=foundry | jq -r '.access_token')
                            

if [[ ! $1 =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
  echo -e "\nUsage: $0 <esxi ip address>\n"
  exit 1
fi

echo -e "\n*** If prompted, type your SUDO password. ***\n"

if grep -q "$ESXI_HOSTNAME" $HOSTS_FILE; then
  sudo sed -i -r "s/.*($ESXI_HOSTNAME)/$1 \1/" $HOSTS_FILE
  echo -e "\n$ESXI_HOSTNAME ($1) updated in $HOSTS_FILE"
else
  echo "$1 $ESXI_HOSTNAME" | sudo tee -a $HOSTS_FILE > /dev/null
  echo -e "\n$ESXI_HOSTNAME ($1) added to $HOSTS_FILE"
fi

sudo systemctl restart dnsmasq
echo -e "\ndnsmasq restarted."

echo -e "\n*** If prompted, type your ESXi $ESXI_USER password. ***\n"

ssh $ESXI_USER@$ESXI_HOSTNAME << EOF
  esxcli network vswitch standard portgroup add -p bridge-net -v vSwitch0
  esxcli storage nfs41 add -H $APPLIANCE_IP -v iso -s /export/$TOPOMOJO_NFS_PV/topomojo-topomojo-api

  mkdir -p $TOPOMOJO_STOCK_PATH
  vmkfstools -c 10G -d thin $TOPOMOJO_STOCK_PATH/blank-10g.vmdk
  vmkfstools -c 20G -d thin $TOPOMOJO_STOCK_PATH/blank-20g.vmdk
  vmkfstools -c 40G -d thin $TOPOMOJO_STOCK_PATH/blank-40g.vmdk

  if [ ! -f "$ESXI_CERTDIR/rui.crt.orig" ]; then
    cp $ESXI_CERTDIR/rui.crt $ESXI_CERTDIR/rui.crt.orig
  fi
  echo "$RUI_CRT" > $ESXI_CERTDIR/rui.crt
  
  if [ ! -f "$ESXI_CERTDIR/rui.key.orig" ]; then
    cp $ESXI_CERTDIR/rui.key $ESXI_CERTDIR/rui.key.orig
  fi
  echo "$RUI_KEY" > $ESXI_CERTDIR/rui.key

  /etc/init.d/hostd restart
  /etc/init.d/vpxa restart
EOF

# Test if blank templates do not exist
if ! grep -q "blank-" <<< $(curl -s -X GET "https://foundry.local/topomojo/api/templates" -H "Authorization: Bearer $TOPOMOJO_ACCESS_TOKEN"); then

  # Add blank templates to TopoMojo
  for x in 10g 20g 40g; do
    curl -X POST --silent --output /dev/null \
         --url "https://foundry.local/topomojo/api/template-detail" \
         -H "Authorization: Bearer $TOPOMOJO_ACCESS_TOKEN" \
         -H "Content-Type: application/json" \
         --data-binary @- <<EOF
{
  "id": "",
  "name": "blank-$x",
  "description": "Attach a bootable ISO to Install an Operating System",
  "networks": "lan",
  "guestinfo": "",
  "detail": "",
  "isPublished": true
}
EOF
  done
fi

# Configure topomojo-api
sed -i -r "s/(Pod__Url:).*/\1 https:\/\/$ESXI_HOSTNAME/" topomojo.values.yaml 
helm upgrade --install --wait -f topomojo.values.yaml topomojo sei/topomojo
kubectl rollout restart deployment.apps/topomojo-topomojo-api

echo -e "\nESXi setup completed for $ESXI_HOSTNAME\n"
